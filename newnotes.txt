func CreateQuestion(w http.ResponseWriter, r *http.Request) {
    // Parse the request body into a Question struct
    var q Question
    err := json.NewDecoder(r.Body).Decode(&q)
    if err != nil {
        http.Error(w, err.Error(), http.StatusBadRequest)
        return
    }

    // Insert the question into the database and retrieve the generated question ID
    var questionID int
    err = db.QueryRow(
        "INSERT INTO questions (question_prompt, option_a, option_b, option_c, option_d, correct_option, topics_id) VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING questions_id",
        q.QuestionPrompt,
        q.OptionA,
        q.OptionB,
        q.OptionC,
        q.OptionD,
        q.CorrectOption,
        q.TopicsID,
    ).Scan(&questionID)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }

    // Set the question ID and return the JSON-encoded question object
    q.QuestionID = questionID
    w.Header().Set("Content-Type", "application/json")
    err = json.NewEncoder(w).Encode(q)
    if err != nil {
        http.Error(w, err.Error(), http.StatusInternalServerError)
        return
    }
}

func ReadQuestion(id int) (Question, error) {
	q := Question{}
	err := db.QueryRow("SELECT * FROM questions WHERE questions_id = $1", id).Scan(&q.QuestionID, &q.QuestionPrompt, &q.OptionA, &q.OptionB, &q.OptionC, &q.OptionD, &q.CorrectOption, &q.TopicsID, &q.CreatedAt)
	if err != nil {
		return q, err
	}
	return q, nil
}


//thursday

func testresults(w http.ResponseWriter, r *http.Request) {
    userID := Alreadyloggedin(r)

    rows, err := db.Query("SELECT questions.question_prompt, responses.answer, responses.is_correct, TestResults.score, TestResults.created_at FROM TestResults INNER JOIN questions ON TestResults.questions_id = questions.questions_id INNER JOIN responses ON TestResults.questions_id = responses.questions_id WHERE TestResults.user_id = $1", userID)
    if err != nil {
        fmt.Println("error 2 is ", err)
    }

    testResults := []TestResult{}
    for rows.Next() {
        testResult := TestResult{}
        questions := Question{}
        responses := Response{}

        err = rows.Scan(&questions.QuestionPrompt, &responses.Answer, &responses.IsCorrect, &testResult.Score, &testResult.CreatedAt)
        if err != nil {
            fmt.Println(err)
        }
        testResults = append(testResults, testResult)
    }

    data := struct {
        TestResults []TestResult
    }{
        TestResults: testResults,
    }

    templates.ExecuteTemplate(w, "testresults.html", data)
}
